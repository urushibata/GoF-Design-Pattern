/**
 *
 */
package command;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;

import command.command.Command;
import command.command.MacroCommand;
import command.drawer.ColorCommand;
import command.drawer.DrawCanvas;
import command.drawer.DrawCommand;

/**
 * @author urushibata
 * 
 */
public class Main extends JFrame implements ActionListener{
	/*
	 * implements ActionListener, MouseMotionListener, WindowListener {
	 */

	private static final long serialVersionUID = 6430184986003295769L;
	// 描画履歴
	private MacroCommand history = new MacroCommand();
	// 描画領域
	// DrawCanvasインスタンス作成
	private DrawCanvas canvas = new DrawCanvas(400, 400, history);
	// クリアボタン
	// JButtonインスタンス作成
	private JButton clearButton = new JButton("clear");
	// アンドゥ
	// JButtonインスタンス作成
	private JButton undoButton = new JButton("undo");
	// 赤文字
	// JButtonインスタンス作成
	private JButton redFontButton = new JButton("red");
	// 青文字
	// JButtonインスタンス作成
	private JButton blueFontButton = new JButton("blue");
	// 緑文字
	// JButtonインスタンス作成
	private JButton greenFontButton = new JButton("green");

	/**
	 * @param title ウィンドウのタイトル
	 */
	public Main(String title) {
		// スーパクラスのコンストラクタ
		super(title);

		// JFrame→Frame→Windowスーパクラスのメソッド
		// ウィンドウにリスナー機能を実装する。無くても動く！！
		// this.addWindowListener(this);
		// canvasにMouseMotionListenerを持たせる。
		canvas.addMouseMotionListener(new MouseMotionAdapter() {
			/*
			 * @see
			 * java.awt.event.ActionListener#mouseDragged(java.awt.event.ActionEvent
			 * addMouseMotionListenerされたコンポーネントを監視しドラッグイベントが発生したら処理をするインナークラス
			 * インターフェースを実装する場合は、必要ないメソッドも空で実装しなければいけないが、MouseMotionAdapterクラス
			 * はMouseMotionListenerのメソッドが空で実装されたクラスの為、必要なメソッドのみ実装すればよくなる。
			 */
			@Override
			public void mouseDragged(MouseEvent e) {
				// DrawCommandインスタンスを作成しhistory(MacroCommand)に格納する。
				Command cmd = new DrawCommand(canvas, e.getPoint());
				history.append(cmd);
				try {
					// 1秒待つ
					Thread.sleep(1000);
					// コマンドを実行
					cmd.execute();
				} catch (InterruptedException e1) {
					e1.printStackTrace();
				}
			}
		});

		// clearButtonにMouseActionListenerを持たせる。
		clearButton.addActionListener(this);
		// undoButtonにMouseActionListenerを持たせる。
		undoButton.addActionListener(this);
		// redButtonにMouseActionListenerを持たせる。
		redFontButton.addActionListener(this);
		// blueFontButtonにMouseActionListenerを持たせる。
		blueFontButton.addActionListener(this);
		// greenFontButtonにMouseActionListenerを持たせる。
		greenFontButton.addActionListener(this);

		// Boxクラスはコンポーネントを作成するクラス
		// addメソッドでコンポーネント上にコンポーネントを作成する。
		// X_AXIS コンポーネントを左から右に並べて表示する。
		Box buttonBox = new Box(BoxLayout.X_AXIS);
		buttonBox.add(undoButton);
		buttonBox.add(clearButton);
		buttonBox.add(redFontButton);
		buttonBox.add(blueFontButton);
		buttonBox.add(greenFontButton);
		System.out.println("ボタンコンポーネント上にアンドゥボタン・クリアボタン・赤ボタン・青ボタン・緑ボタン作成");

		// Y_AXIS コンポーネントを上から下に並べて表示する。
		Box mainBox = new Box(BoxLayout.Y_AXIS);
		mainBox.add(buttonBox);
		mainBox.add(canvas);
		System.out.println("メインコンポーネント上にボタンコンポーネントとキャンバス作成");

		// getContentPaneでルートコンポーネントを作成する。
		getContentPane().add(mainBox);
		System.out.println("ルートコンポーネント上にメインコンポーネントを作成");

		// Windowクラスのメソッド(JFrameを継承しているため使用可能)
		// 各コンポーネントよりウィンドウのサイズを自動調整する。これがないと画面は最少サイズになる。
		pack();
		// ウィンドウ表示
		setVisible(true);
		System.out.println("ウィンドウ表示");
	}

	/*
	 * (非 Javadoc)
	 * 
	 * @see
	 * java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
	 * addActionListenerされたコンポーネントを監視しイベントが発生したら処理をする。
	 */
	@Override
	public void actionPerformed(ActionEvent e){
		// アクションイベント発生元がクリアボタンの場合
		if(e.getSource() == clearButton){
			// MacroCommandに溜まったイベント履歴を全てクリアする。
			history.clear();
			// 再描画
			// DrawCanvas→Canvas→Componentスーパクラスのメソッド
			canvas.repaint();
			System.out.println("Clear Event execute success");
		// アクションイベント発生元がアンドゥボタンの場合
		}else if(e.getSource() == undoButton){
			history.undo();
			// DrawCanvas→Canvas→Componentスーパクラスのメソッド
			canvas.repaint();
			System.out.println("Undo Event execute success");
		}else if(e.getSource() == redFontButton){
			Command cmd = new ColorCommand(255, 0, 0);
			history.append(cmd);
			
			System.out.println("ChangeColor Red Event execute success");
		}else if(e.getSource() == blueFontButton){
			Command cmd = new ColorCommand(0, 0, 255);
			history.append(cmd);
			
			System.out.println("ChangeColor Blue Event execute success");
		}else if(e.getSource() == greenFontButton){
			Command cmd = new ColorCommand(0, 255, 0);
			history.append(cmd);
			cmd.execute();
			
			System.out.println("ChangeColor Green Event execute success");
		}
	}

	/*
	 * (非 Javadoc)
	 * 
	 * メインクラス
	 */
	public static void main(String[] args) {
		System.out.println("command pattern Strat");
		new Main("Command Pattern Sample");
	}
}