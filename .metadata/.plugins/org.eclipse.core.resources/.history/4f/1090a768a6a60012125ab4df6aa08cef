package command.command;

//import java.util.ArrayDeque;
import java.util.LinkedList;
import java.util.Iterator;

/**
 * 命令の集合クラス
 * @author urushibata
 * @version 1.0
 */
public class MacroCommand implements Command{

	// 命令の集合(スタック:LIFO)
	//private ArrayDeque<Command> commands = new ArrayDeque<Command>();
	// 命令の集合(キュー:FIFO)
	// LinkedListは実際、両端キュー(deque:デック)であるが、Javaではキュー構造の連結リストがないので両端キューを使用してキュー構造を実装する。
	private LinkedList<Command> commands = new LinkedList<Command>();

	/*
	 * コマンドを順番に実行する。
	 * @see command.cmmand.Command#execute()
	 * @since 1.0
	 */
	@Override
	public void execute(){
		Iterator<Command> it = commands.iterator();
		while (it.hasNext()){
			((Command) it.next()).execute();
		}
	}

	/**
	 * コマンドを履歴に追加する。
	 * @param cmd DrawComandインスタンスがCommand型で渡される。
	 * @since 1.0
	 */
	public void append(Command cmd){
		// コマンドが自分自身以外の場合
		if (cmd != this) {
			// MacroCommandにコマンドを追加
			// pushはリストの先頭に挿入される(Stackの場合)。
			//commands.push(cmd);
			// offerはリストの最後尾に挿入される(Queueの場合)。
			commands.offer(cmd);

			System.out.println("追加後commands:[");
			int i = 0;
			for(Command c: commands){
				System.out.println("MacroCommand.commands[" + i + "]:" + c);
				i++;
			}
			System.out.println("]");
		}
	}

	// 最後の命令を削除
	public void undo() {
		System.out.println("Undo前MacroCommandの中身：" + commands);
		// コマンドが自分自身以外の場合
		if (!commands.isEmpty()){
			// リストの先頭ら命令を一つ削除する。
			//commands.pop();
			// リストの最後尾から命令を一つ削除する。
			commands.pollLast();
			System.out.println("Undo後MacroCommandの中身：" + commands);
		}
	}

	// 全部削除
	public void clear() {
		// コマンド履歴がある場合
		if (!commands.isEmpty()) {
			commands.clear();
		}
	}
}