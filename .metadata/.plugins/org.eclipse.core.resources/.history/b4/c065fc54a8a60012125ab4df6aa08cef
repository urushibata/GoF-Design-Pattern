package command.drawer;

import java.io.File;
import java.io.IOException;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;

import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;

import command.command.MacroCommand;

/**
 * java.awt.Component→java.awt.Canvasを継承<br />
 * InterFace Drawableの実装クラス
 * @author urushibata
 * @version 1.0
 */
public class DrawCanvas extends Canvas implements Drawable {
	private static final long serialVersionUID = 8912999038848526103L;
	// 描画色
	private Color color;
	// 描画する点の半径
	private int radius;
	// Mainクラスから渡され、このクラスと共有する。
	// 履歴
	private MacroCommand history;

	/**
	 * コンストラクタ
	 * @param width
	 * @param height
	 * @param history
	 */
	public DrawCanvas(int width, int height, MacroCommand history) {
		setSize(width, height);
		setBackground(Color.white);
		this.history = history;
		init();
	}

	/**
	 * 履歴を描画<br />
	 * Canvas→Componentのpaintコールバックメソッド
	 * @see java.awt.Canvas#paint(java.awt.Graphics)
	 * @since 1.0
	 */
	@Override
	public void paint(Graphics g){
		System.out.println("paintメソッド");
		history.execute();
	}

	/**
	 * @see command.drawer.Drawable#draw(int, int)
	 * @since 1.0
	 */
	@Override
	public void draw(int x, int y){
		System.out.println("今の色：" + this.color);

		// ComponentクラスのgetGraphicsでGraphicsクラス作成
		Graphics g = getGraphics();
		g.setColor(this.color);
		// 塗り潰された円を書く。
		// 第一引数	左上のX座標
		// 第二引数	左上のY座標
		// 第三引数	width
		// 第四引数	height
		g.fillOval(x - this.radius, y - this.radius, this.radius * 2, this.radius * 2);
	}

	/**
	 * @see command.drawer.Drawable#init()
	 * @since 1.0
	 */
	@Override
	public void init() {
		this.color = Color.red;
		this.radius = 3;
		history.append(new ColorCommand(this, color));
	}

	/**
	 * @see command.drawer.Drawable#setColor(java.awt.Color)
	 */
	@Override
	public void setColor(Color color){
		System.out.println("色セット！！→" + color);
		this.color = color;
	}

	/**
	 * @see command.drawer.Drawable#printOut()
	 * @since 1.0
	 */
	@Override
	public void printOut(){
		JFileChooser fc = new JFileChooser();
		fc.setFileFilter(new FileNameExtensionFilter("画像ファイル(*.png)", "png"));
		// 複数選択不可
		fc.setMultiSelectionEnabled(false);
		// ファイル選択ダイアログ表示
		int result = fc.showSaveDialog(this);

		if(result == JFileChooser.APPROVE_OPTION){
			File f = fc.getSelectedFile();
			// TODO 保存できない！！
			System.out.println("保存先選択完了：" + f.toString());
			try{
				int w = this.getWidth();
				int h = this.getHeight();
				int type = BufferedImage.TYPE_INT_RGB;
				System.out.println("w : " + w + " h : " + h + " type : " + type);
				BufferedImage buffer = new BufferedImage(w, h, type);
				Graphics2D g2 = buffer.createGraphics();
				print(g2);
				g2.dispose();
				ImageIO.write(buffer, "png", f);
			}catch(IOException e) {
				e.printStackTrace();
			}
		}else if(result == JFileChooser.ERROR_OPTION){
			System.out.println("エラーが発生しました。");
		}
	}
}
